Index: src/UserScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.Objects;\r\n\r\npublic class UserScreen extends JPanel implements ActionListener, KeyListener {\r\n\r\n    //image loading variables\r\n    public static BufferedImage image;\r\n    public static boolean needImage = true;\r\n    public static boolean gotImage = false;\r\n\r\n    //instance variables\r\n    private Player player;\r\n    private GameManager manager;\r\n    private Timer drawFrame;\r\n    private Timer enemySpawner;\r\n\r\n    //constructor\r\n    public UserScreen() {\r\n        player = new Player(500, 860, 90, 90);\r\n        manager = new GameManager(player);\r\n\r\n        //timer that runs the \"frame rate\"\r\n        drawFrame = new Timer(1000/90, this);\r\n        drawFrame.start();\r\n\r\n        //timer that spawns enemies at a \"spawn rate\"\r\n        enemySpawner = new Timer(2000, manager);\r\n        enemySpawner.start();\r\n\r\n        if (needImage) {\r\n            loadImage(\"space.jpg\");\r\n        }\r\n    }\r\n\r\n    //paint the screen (JPanel) with initial active objects\r\n    @Override\r\n    public void paintComponent(Graphics g) {\r\n        drawLevelScreen(g);\r\n    }\r\n\r\n    //draws the initial level screen\r\n    public void drawLevelScreen(Graphics g) {\r\n        g.drawImage(image, 0, 0, null);\r\n        manager.drawObjects(g);\r\n    }\r\n\r\n    //updates current level screen at a certain rate\r\n    public void updateLevelScreen() {\r\n        player.updatePlayer();\r\n        manager.updateObjects();\r\n    }\r\n\r\n    //key and action listener methods\r\n    //action performed method runs at a certain frame rate\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        //update all objects then repaint the screen\r\n        updateLevelScreen();\r\n        repaint();\r\n    }\r\n\r\n    //reads when a key is typed by the user\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n\r\n    }\r\n\r\n    //reads when the user presses a key and translates into code\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        if (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n            player.moveLeft();\r\n        } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n            player.moveRight();\r\n        }\r\n    }\r\n\r\n    //stops movement upon release of a key\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        player.setSpeedX(0);\r\n    }\r\n\r\n    //image loading method\r\n    void loadImage(String imageFile) {\r\n        if (needImage) {\r\n            try {\r\n                image = ImageIO.read(Objects.requireNonNull(this.getClass().getResourceAsStream(imageFile)));\r\n                gotImage = true;\r\n            } catch (Exception e) {\r\n                System.out.println(\"Error at: \" + e.getMessage());\r\n            }\r\n            needImage = false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UserScreen.java b/src/UserScreen.java
--- a/src/UserScreen.java	
+++ b/src/UserScreen.java	
@@ -65,9 +65,7 @@
 
     //reads when a key is typed by the user
     @Override
-    public void keyTyped(KeyEvent e) {
-
-    }
+    public void keyTyped(KeyEvent e) {}
 
     //reads when the user presses a key and translates into code
     @Override
@@ -77,6 +75,10 @@
         } else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
             player.moveRight();
         }
+
+        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
+            manager.shootLaser();
+        }
     }
 
     //stops movement upon release of a key
Index: src/GameManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\npublic class GameManager implements ActionListener {\r\n\r\n    //instance variables\r\n    private Player player;\r\n    private ArrayList<Enemy> enemies;\r\n\r\n    //constructor\r\n    public GameManager(Player player) {\r\n        this.player = player;\r\n        enemies = new ArrayList<Enemy>();\r\n    }\r\n\r\n    //adds an enemy to the array list, priming it to be spawned\r\n    public void spawnEnemy() {\r\n        enemies.add(new Enemy((int) (Math.random() * (WordInvadersDriver.WIDTH-70)), 0, 90, 90));\r\n    }\r\n\r\n    //draw game objects onto the screen\r\n    public void drawObjects(Graphics g) {\r\n        player.draw(g);\r\n        for (Enemy enemy : enemies) {\r\n            enemy.draw(g);\r\n        }\r\n    }\r\n\r\n    //update all objects\r\n    public void updateObjects() {\r\n        for (Enemy enemy : enemies) {\r\n            enemy.updateEnemy();\r\n        }\r\n    }\r\n\r\n    //spawn enemies at a certain rate (rate decided in UserScreen)\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        spawnEnemy();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameManager.java b/src/GameManager.java
--- a/src/GameManager.java	
+++ b/src/GameManager.java	
@@ -7,11 +7,13 @@
     //instance variables
     private Player player;
     private ArrayList<Enemy> enemies;
+    private ArrayList<Laser> lasers;
 
     //constructor
     public GameManager(Player player) {
         this.player = player;
         enemies = new ArrayList<Enemy>();
+        lasers = new ArrayList<Laser>();
     }
 
     //adds an enemy to the array list, priming it to be spawned
@@ -19,12 +21,20 @@
         enemies.add(new Enemy((int) (Math.random() * (WordInvadersDriver.WIDTH-70)), 0, 90, 90));
     }
 
+    //adds a new laser to the array list
+    public void shootLaser() {
+        lasers.add(new Laser(player.getX()+40, 860, 8, 40));
+    }
+
     //draw game objects onto the screen
     public void drawObjects(Graphics g) {
         player.draw(g);
         for (Enemy enemy : enemies) {
             enemy.draw(g);
         }
+        for (Laser laser : lasers) {
+            laser.draw(g);
+        }
     }
 
     //update all objects
@@ -32,6 +42,9 @@
         for (Enemy enemy : enemies) {
             enemy.updateEnemy();
         }
+        for (Laser laser : lasers) {
+            laser.updateLaser();
+        }
     }
 
     //spawn enemies at a certain rate (rate decided in UserScreen)
Index: src/Laser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Laser {\r\n    boolean active;\r\n    boolean collided;\r\n    double speed;\r\n    public void shooting() {\r\n\r\n    }\r\n    public void collided() {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Laser.java b/src/Laser.java
--- a/src/Laser.java	
+++ b/src/Laser.java	
@@ -1,11 +1,49 @@
-public class Laser {
-    boolean active;
-    boolean collided;
-    double speed;
-    public void shooting() {
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.util.Objects;
+
+public class Laser extends GameObject {
+    //image loading variables
+    public static BufferedImage image;
+    public static boolean needImage = true;
+    public static boolean gotImage = false;
+
+    //constructor
+    public Laser(int x, int y, int width, int height) {
+        super(x, y, width, height, 0, 10);
+
+        if (needImage) {
+            loadImage("laser.png");
+        }
+    }
 
+    //draw initial laser object
+    public void draw(Graphics g) {
+        if (gotImage) {
+            g.drawImage(image, getX(), getY(), getWidth(), getHeight(), null);
+        } else {
+            g.setColor(Color.RED);
+            g.fillRect(getX(), getY(), getWidth(), getHeight());
+        }
     }
-    public void collided() {
 
+    //update the laser's position according to the speed
+    public void updateLaser() {
+        setY(getY()-getSpeedY());
+        super.update();
+    }
+
+    //image loading method
+    private void loadImage(String imageFile) {
+        if (needImage) {
+            try {
+                image = ImageIO.read(Objects.requireNonNull(this.getClass().getResourceAsStream(imageFile)));
+                gotImage = true;
+            } catch (Exception e) {
+                System.out.println("Error at: " + e.getMessage());
+            }
+            needImage = false;
+        }
     }
 }
